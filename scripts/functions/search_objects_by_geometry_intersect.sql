-- Function: search_objects_by_geometry_intersect(character varying, geometry)

-- DROP FUNCTION search_objects_by_geometry_intersect(character varying, geometry);

CREATE OR REPLACE FUNCTION search_objects_by_geometry_intersect(IN fid character varying, IN geom geometry)
  RETURNS TABLE(pid character varying, id character varying, name character varying, "desc" character varying, fid character varying, bbox character varying, area_km double precision) AS
$BODY$
DECLARE
  table_number text;
  id_column_name text;
  object_id text;
  rec RECORD;
BEGIN  
	SELECT CAST(f.spid AS text) INTO table_number FROM fields f where f.id = fid;

	-- If a database table for the layer exists (i.e. generated by shp2pgsql) then find matching rows, and then find the ids values for the 
	-- corresponding rows in the objects table, as defined by the fields table 'sid' value for the layer. This may be more efficient as objects table entries
	-- can be complicated combinations of different polygons from a shape that have large bounding boxes. 
	IF EXISTS (SELECT * FROM pg_tables WHERE tablename = table_number) THEN
	  SELECT f.sid INTO id_column_name FROM fields f WHERE f.id = fid;

	  IF id_column_name in (SELECT attname FROM pg_attribute WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = quote_ident(table_number))) THEN
		FOR object_id in EXECUTE 'SELECT DISTINCT ' || quote_ident(id_column_name) || ' FROM ' || quote_ident(table_number) || ' t WHERE ST_Intersects(t.the_geom, $1)' USING geom LOOP
			RETURN QUERY EXECUTE 'SELECT o.pid, o.id, o.name, o.desc as description, o.fid, o.bbox, o.area_km FROM objects o WHERE o.fid=' || quote_literal(fid) || ' AND o.id=' || quote_literal(object_id); 
		END LOOP;
	  ELSE
		-- Otherwise just brute force search all of the objects
		RETURN QUERY EXECUTE 'SELECT o.pid, o.id, o.name, o.desc as description, o.fid, o.bbox, o.area_km FROM objects o WHERE o.fid=' || quote_literal(fid) || ' AND ST_Intersects(o.the_geom, $1)' USING geom;
	  END IF;
	ELSE
	  -- Otherwise just brute force search all of the objects
	  RETURN QUERY EXECUTE 'SELECT o.pid, o.id, o.name, o.desc as description, o.fid, o.bbox, o.area_km FROM objects o WHERE o.fid=' || quote_literal(fid) || ' AND ST_Intersects(o.the_geom, $1)' USING geom;
	END IF;
	RETURN;
END;	
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION search_objects_by_geometry_intersect(character varying, geometry)
  OWNER TO postgres;
